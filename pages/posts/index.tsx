import Head from 'next/head'
import Navbar from '../../components/Navbar'
import { gql, useQuery } from '@apollo/client'
import Pagination from "@choc-ui/paginator";
import { Box, Text, Avatar, Flex, Link, Image, InputGroup, InputLeftElement, Input, Select, CircularProgress, Tag, Center, FormLabel, FormControl, Button, CheckboxGroup, Stack, Checkbox } from "@chakra-ui/react";
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { GiModernCity } from "react-icons/gi";
import { BiSearch } from "react-icons/bi"
import {
  Select as ChakraSelect,
  AsyncSelect,
  CreatableSelect,
  AsyncCreatableSelect,
} from "chakra-react-select";


const allPostsQuery = gql`
  query allPostsQuery($first: Int, $offset: Int) {
    posts(first: $first, offset: $offset) {
      edges {
        node {
          imageUrl
          id
          author {
            name
          }
          title
          tags {
            label
          }
        }
      }
      count
    }
  }
`;

const allTagsQuery = gql`
   query allTagsQuery {
    tags {
      edges {
        value
        label
      }
    }
  }
`;

export default function Home() {

  const router = useRouter()
  const [pageIndex, setPageIndex] = useState(1);
  const [pickerItems, setPickerItems] = React.useState([]);

  const { loading: loadingPosts, data: dataPosts, error: errorPosts, fetchMore: fetchMorePosts } = useQuery(allPostsQuery, {
    variables: {
      first: 10,
      offset: 0
    },
    fetchPolicy: "cache-and-network"
  });

  const {
    loading: loadingTags,
    data: dataTags,
    error: errorTags
  } = useQuery(allTagsQuery, {
    fetchPolicy: "cache-and-network"
  });

  useEffect(() => {
    if (loadingTags === false && dataTags) {
      setPickerItems(dataTags.tags.edges);
    }
  }, [loadingTags, dataTags])

  const truncate = (str: String) => {
    return str.length > 15 ? str.substring(0, 14) + "..." : str;
  }

  function OnPageChange(pageNumber: number): void {
    console.log(pageNumber)
    setPageIndex(pageNumber)
    fetchMorePosts({
      variables: {
        limit: 10,
        offset: (pageNumber - 1) * 10
      },
    });
    router.push(`/posts?page=${pageNumber}`)
  }

  if (loadingPosts) return (
    <Center className="bg-gray-100">
      <Flex>
        <CircularProgress
          margin="auto"
          isIndeterminate
          color="brandRed.500"
          size="300px"
          thickness="4px"
        />
      </Flex>
    </Center>)

  if (errorPosts) return <p>Oh no... {errorPosts.message}</p>

  return (
    <div className="bg-gray-100">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar/>
      <main className="bg-gray-100">
        <div className="my-10">
          <Flex direction="row" justifyContent="center" gridGap={10}>
            <Box flexBasis="25%" className="shadow mr-15 max-w-sm rounded bg-white p-1" h="100%">
              <FormControl className="pb-5">
                <ChakraSelect
                  isMulti
                  name="city"
                  options={pickerItems}
                  placeholder="Wybierz miasto..."
                  selectedOptionColor="green"
                />
              </FormControl>
              <FormControl className="pb-5">
                <ChakraSelect
                  isMulti
                  name="musicstyle"
                  options={pickerItems}
                  placeholder="Wybierz rodzaj muzyki..."
                  selectedOptionColor="green"
                />
              </FormControl>
              <CheckboxGroup colorScheme='brandRed'>
                <FormLabel className="pb-0.5">Rodzaj ogłoszenia</FormLabel>
                <Stack className="pb-5" spacing={[1, 2]} direction={['column']}>
                  <Checkbox value='artists'>Artyści</Checkbox>
                  <Checkbox value='premises'>Lokale</Checkbox>
                  <Checkbox value='services'>Usługi</Checkbox>
                </Stack>
              </CheckboxGroup>
              <Button leftIcon={<BiSearch />} colorScheme='brandRed' my={2}>
                Szukaj
              </Button>
            </Box>
              <ul className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-2">
                <div className="justify-center content-center shadow max-w-4xl rounded p-1 bg-white">
                  <Flex>
                    <Select backgroundColor="gray.50" textColor="gray.400" focusBorderColor="brandRed.200">
                      <option value="date-latest">Najnowsze ogłoszenia</option>
                      <option value="date-oldest">Najstarsze ogłoszenia</option>
                    </Select>
                  </Flex>
                </div>
                {dataPosts?.posts.edges.map(({ node }: any, i: React.Key) => (
                  <li key={i}>
                    <Box
                      shadow="sm"
                      rounded="md"
                      backgroundColor="white"
                      width="2xl"
                      display="flex"
                      className="transform hover:scale-105 transition duration-200 ease-in-out"
                    >
                      <Image
                        rounded="sm"
                        w={250}
                        h={150}
                        fit="cover"
                        src={node.imageUrl}
                        alt="Article"
                        margin={0.5}
                      />
                      <Box className="px-4">
                        <Box>
                          <Link
                            display="block"
                            color={"black"}
                            fontWeight="bold"
                            fontSize="2xl"
                            mt={2}
                            _hover={{ color: "gray.600", textDecor: "underline" }}
                          >
                            {node.title}
                          </Link>
                          <Flex flexDirection="row" py={2}>
                            {node?.tags.map(({ tag }: any, i: React.Key) => (
                              <Tag key={i} colorScheme="brandOrangeRed" className="mr-2">
                                {truncate(node.tags[i]?.label)}
                              </Tag>
                            ))}
                          </Flex>
                        </Box>
                        <Box mt={4}>
                          <Flex alignItems="center">
                            <Flex alignItems="center">
                              <Image
                                h={10}
                                fit="cover"
                                rounded="full"
                                src="https://images.unsplash.com/photo-1586287011575-a23134f797f9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=48&q=60"
                                alt="Avatar"
                              />
                              <Link mx={2} fontWeight="bold" color={"black"}>
                                {node.author.name}
                              </Link>
                            </Flex>
                          </Flex>
                        </Box>
                      </Box>
                    </Box>
                  </li>
                ))}
              </ul>
          </Flex>
          <Flex
            w="full"
            alignItems="center"
            justifyContent="center"
            py={50}
          >
            <Pagination
              baseStyles={{ bg: "whiteAlpha.50" }}
              activeStyles={{ bg: "brandRed.300" }}
              defaultCurrent={pageIndex}
              total={dataPosts.posts.count}
              paginationProps={{ display: "flex" }}
              pageNeighbours={3}
              responsive
              rounded="full"
              onChange={(pageNumber) => OnPageChange(pageNumber)}
            />
          </Flex>
        </div>
      </main>
      <footer>
      </footer>
    </div>
  )
}
